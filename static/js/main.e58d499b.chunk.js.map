{"version":3,"sources":["components/Logo/Logo.tsx","components/UserImage/UserImage.tsx","components/Header/Header.tsx","components/Chat/Messages.tsx","components/MessageForm/MessageForm.tsx","components/Chat/Chat.tsx","hooks/useLocalStorage.tsx","components/Login/LoginButton.tsx","components/Login/Login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Logo","className","UserImage","isBlue","xmlns","viewBox","cx","cy","r","d","Header","username","setUsername","onClick","Messages","allMessages","messagesEnd","useRef","useEffect","current","scrollIntoView","behavior","map","message","index","key","ref","MessageForm","setAllMessages","useState","setMessage","inputValue","onSubmit","e","preventDefault","prevState","value","handleSubmit","placeholder","onChange","target","Chat","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","useLocalStorage","LoginButton","label","setisBlue","Login","App","length","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e58d499b.chunk.js","sourcesContent":["import React from \"react\";\nexport function Logo() {\n  return (<>\n    <h2 className=\"logo__title\">Chat</h2>\n    <p className=\"logo__subtitle\">to JS master</p>\n  </>);\n}\n","import React from \"react\";\n\ntype AppProps = {\n  isBlue: boolean;\n};\nexport function UserImage({ isBlue }: AppProps) {\n  return (\n    <svg\n      className={isBlue ? `user-image user-image--blue` : `user-image`}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 32 32\"\n    >\n      <circle cx=\"16.022\" cy=\"15.977\" r=\"14.499\" />\n      <path\n        className={isBlue ? `user-image__patch user-image__patch--hovered` : `user-image__patch`}\n        d=\"M16.022.159C7.286.159.204 7.241.204 15.977s7.082 15.819 15.818 15.819S31.84 24.713 31.84 15.977 24.759.159 16.022.159zm-.028 6.516c2.382 0 4.312 2.284 4.312 5.102 0 2.816-1.894 6.225-4.274 6.225-2.382 0-4.351-3.408-4.351-6.225 0-2.818 1.932-5.102 4.313-5.102zm8.65 17.627c0 .853-.674.977-1.466.977H8.875c-.791 0-1.463-.124-1.463-.977 0 0-.6-6.235 4.157-8.699.818 1.867 2.352 3.414 4.464 3.414 1.729 0 3.512-1.563 4.332-3.433 4.754 2.465 4.28 8.718 4.279 8.718z\"\n      />\n    </svg>\n  );\n}\n","import React from \"react\";\nimport { Logo } from \"../Logo/Logo\";\nimport { UserImage } from \"../UserImage/UserImage\";\n\nexport interface Props {\n  username: string;\n  setUsername: Function;\n}\n\nfunction Header({ username, setUsername }: Props) {\n  return (\n    <section className=\"header\">\n      <div className=\"header__logo-wrapper\">\n        <Logo />\n      </div>\n      <div className=\"header__login-wrapper\">\n        <span className=\"header__login-username\">{username}</span> \n        <button className=\"header__logout-button\" onClick={() => setUsername(\"\")}>Logout</button>\n        <UserImage isBlue />\n      </div>\n    </section>\n  );\n}\n\nexport default Header;\n","import React, { useEffect, useRef } from \"react\";\n\nexport type Props = {\n  allMessages: string[][];\n};\n\nexport function Messages({ allMessages }: Props) {\n  const messagesEnd = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (messagesEnd.current) {\n      messagesEnd.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [allMessages]);\n\n  const getMessageClass = (username: string) => {\n    if (username === \"John Doe\") {\n      return \"User1\";\n    } else {\n      return \"User2\";\n    }\n  };\n\n  return (\n    <div className=\"chat__messages\">\n      <ul className=\"messages\">\n        {allMessages.map((message, index) => (\n          <li key={index} className={`messages__item messages__item--${getMessageClass(message[0])}`}>\n            {message[1]}\n          </li>\n        ))}\n        <div ref={messagesEnd} />\n      </ul>\n    </div>\n  );\n}\n","import React, { useState, useRef } from \"react\";\n\nexport interface Props {\n  username: string;\n  setAllMessages: (cb: (prevState: string[][]) => string[][]) => void;\n  allMessages: string[][];\n}\n\nexport function MessageForm({ username, allMessages, setAllMessages }: Props) {\n  const [message, setMessage] = useState<string>(\"\");\n  const inputValue = useRef<HTMLTextAreaElement>(null);\n\n  const handleSubmit = (e: any, username: string, message: string) => {\n    e.preventDefault();\n    setAllMessages(prevState => [...prevState, [username, message]]);\n    if (inputValue.current) {\n      inputValue.current.value = \"\";\n    }\n  };\n\n  return (\n    <form className=\"message-form\" onSubmit={e => handleSubmit(e, username, message)}>\n      <textarea\n        className=\"message-form__input\"\n        placeholder=\"write message...\"\n        ref={inputValue}\n        onChange={(e: any) => setMessage(e.target.value)}\n      />\n      <div className=\"message-form__button-wrapper\"><button className=\"message-form__button\">send</button></div>\n    </form>\n  );\n}\n","import React from \"react\";\nimport Header from \"../Header/Header\";\nimport { UserImage } from \"../UserImage/UserImage\";\nimport { Messages } from \"./Messages\";\nimport { MessageForm } from \"../MessageForm/MessageForm\";\nimport useLocalStorage from \"../../hooks/useLocalStorage\";\n\ninterface Props {\n  username: string;\n  setUsername: (username: string) => void;\n}\n\nfunction Chat({ username, setUsername }: Props) {\n  const [allMessages, setAllMessages] = useLocalStorage(\"chatMessages\", []);\n\n  return (\n    <div className=\"chat-window\">\n      <Header username={username} setUsername={setUsername} />\n      <section className=\"chat\">\n        <div className=\"chat__header\">\n          <div className=\"chat__header-img\">\n            <UserImage isBlue={false} />\n          </div>\n          <h5 className=\"chat__header-title\">{username === \"John Doe\" ? \"John Smith\" : \"John Doe\"}</h5>\n        </div>\n        <Messages allMessages={allMessages} />\n      </section>\n      <MessageForm username={username} allMessages={allMessages} setAllMessages={setAllMessages} />\n    </div>\n  );\n}\n\nexport default Chat;\n","import { useState } from 'react';\n\n// Hook\nexport default function useLocalStorage(key:string, initialValue:string[][]) {\n    // State to store our value\n    // Pass initial state function to useState so logic is only executed once\n    const [storedValue, setStoredValue] = useState(() => {\n      try {\n        // Get from local storage by key\n        const item = window.localStorage.getItem(key);\n        // Parse stored json or if none return initialValue\n        return item ? JSON.parse(item) : initialValue;\n      } catch (error) {\n        // If error also return initialValue\n        console.log(error);\n        return initialValue;\n      }\n    });\n  \n    // Return a wrapped version of useState's setter function that ...\n    // ... persists the new value to localStorage.\n    const setValue = (value:string[][]) => {\n      try {\n        // Allow value to be a function so we have same API as useState\n        const valueToStore =\n          value instanceof Function ? value(storedValue) : value;\n        // Save state\n        setStoredValue(valueToStore);\n        // Save to local storage\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      } catch (error) {\n        // A more advanced implementation would handle the error case\n        console.log(error);\n      }\n    };\n  \n    return [storedValue, setValue];\n  }\n","import React, { useState, useEffect } from \"react\";\nimport { UserImage } from \"../UserImage/UserImage\";\n\nexport interface Props {\n  label: string;\n  setUsername: (username: string) => void;\n}\n\nfunction LoginButton({ label, setUsername }: Props) {\n  const [isBlue, setisBlue] = useState<boolean>(false);\n\n  useEffect(() => {\n    if(label === \"John Doe\") {\n      setisBlue(true)\n    }\n  }, [label])\n\n  const handleClick = () => {\n    setUsername(label);\n  };\n\n  return (\n    <button\n      className={isBlue ? `login__button login__button--blue` : `login__button`}\n      onClick={handleClick}\n    >\n      <div className=\"login__user-wrapper\">\n        <div className=\"login__user-icon-wrapper\">\n          <UserImage isBlue={isBlue}/>\n        </div>\n        <span className={isBlue ? `login__user-text login__user-text--blue` : `login__user-text`}>{label}</span>\n      </div>\n    </button>\n  );\n}\n\nexport default LoginButton;\n\n\n","import React from \"react\";\nimport LoginButton from \"./LoginButton\";\nimport { Logo } from \"../Logo/Logo\";\n\nexport interface Props {\n  setUsername: (username: string) => void;\n}\n\nfunction Login({ setUsername }: Props) {\n  return (\n    <section className=\"login\">\n      <div className=\"login__title-wrapper\">\n        <Logo />\n      </div>\n      <div className=\"login__button-wrapper\">\n        <LoginButton label=\"John Doe\" setUsername={setUsername} />\n        <LoginButton label=\"John Smith\" setUsername={setUsername} />\n      </div>\n      <div className=\"login__footer\">Choice your account and start conversation</div>\n    </section>\n  );\n}\n\nexport default Login;\n\n\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Chat from \"./components/Chat/Chat\";\nimport Login from \"./components/Login/Login\";\n\nconst App = () => {\n  const [username, setUsername] = useState<string>(\"\");\n  \n  return (\n    <div className=\"App\">\n      {username.length ? (\n        <Chat username={username} setUsername={setUsername} />\n      ) : (\n        <Login setUsername={setUsername} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"../src/styles/main.scss\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}